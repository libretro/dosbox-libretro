DEBUG := 0
GIT_VERSION := " $(shell git rev-parse --short HEAD)"

UNAME=$(shell uname -s)
UNAMEM=$(shell uname -m)

platform ?= unix
ifneq ($(findstring MINGW,$(UNAME)),)
	platform = win
else ifneq ($(findstring Darwin,$(UNAME)),)
	platform = osx
else ifneq ($(findstring win,$(UNAME)),)
	platform = win
endif

LIBRETRO_DIR := libretro
TARGET_NAME  := dosbox
WITH_DYNAREC :=

CORE_DIR    := .
INCFLAGS    :=
SOURCES_C   :=
SOURCES_CXX :=

include Makefile.common

# try to guess the dynarec based on the host system, unreliable
ifeq ($(platform),win)
	ifneq ($(findstring MINGW32,$(UNAME)),)
		WITH_DYNAREC=x86
	else ifneq ($(findstring MINGW64,$(UNAME)),)
		WITH_DYNAREC=x86_64
	endif
else ifeq ($(platform),unix)
	ifneq ($(findstring i686,$(UNAMEM)),)
		WITH_DYNAREC=x86
	else ifneq ($(findstring x86_64,$(UNAMEM)),)
		WITH_DYNAREC=x86_64
	endif
else ifeq ($(platform),osx)
	ifneq ($(findstring i686,$(UNAMEM)),)
		WITH_DYNAREC=x86
	else ifneq ($(findstring x86_64,$(UNAMEM)),)
		WITH_DYNAREC=x86_64
	else ifneq ($(findstring arm64,$(UNAMEM)),)
		WITH_DYNAREC=arm64
	endif
endif

# defines for sbcs
ifeq ($(target), cpi)
	COMMONFLAGS += -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	WITH_DYNAREC = arm
else ifeq ($(target), nintendoc)
	COMMONFLAGS += -marm -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
	WITH_DYNAREC = arm
endif

# flags
ifneq ($(findstring unix,$(platform)),)
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
	TARGET := $(TARGET_NAME)_libretro.so
	LDFLAGS += -shared -Wl,--version-script=libretro/link.T
	fpic = -fPIC
	ifneq ($(findstring armv,$(platform)),)
		WITH_DYNAREC = arm
	endif
else ifeq ($(platform), osx)
	COMMONFLAGS += -DC_HAVE_MPROTECT="1"
	ifneq ($(findstring arm64,$(UNAMEM)),)
		COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1
	endif
	TARGET := $(TARGET_NAME)_libretro.dylib
	LDFLAGS += -dynamiclib
	fpic = -fPIC
	ifeq ($(arch),ppc)
		COMMONFLAGS += -DBLARGG_BIG_ENDIAN=1 -D__ppc__
	endif
	OSXVER = `sw_vers -productVersion | cut -d. -f 2`
	OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
	fpic += -mmacosx-version-min=10.1
	ifndef ($(UNIVERSAL))
		CFLAGS += $(ARCHFLAGS)
		CXXFLAGS += $(ARCHFLAGS)
		LDFLAGS += $(ARCHFLAGS)
	endif
else ifneq (,$(findstring ios,$(platform)))
	TARGET := $(TARGET_NAME)_libretro_ios.dylib
	COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1 -marm
	fpic = -fPIC
	LDFLAGS += -dynamiclib
	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
	endif
	ifeq ($(platform),ios-arm64)
		CC = cc -arch arm64 -isysroot $(IOSSDK)
		CXX = c++ -arch arm64 -isysroot $(IOSSDK)
		WITH_DYNAREC = arm64
	else
		CC = cc -arch armv7 -isysroot $(IOSSDK)
		CXX = c++ -arch armv7 -isysroot $(IOSSDK)
		WITH_DYNAREC = arm
	endif
	COMMONFLAGS += -DIOS
	ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
		CC += -miphoneos-version-min=8.0
		COMMONFLAGS += -miphoneos-version-min=8.0
	else
		CC += -miphoneos-version-min=5.0
		COMMONFLAGS += -miphoneos-version-min=5.0
	endif
else ifeq ($(platform), tvos-arm64)
	TARGET := $(TARGET_NAME)_libretro_tvos.dylib
	COMMONFLAGS += -DHAVE_POSIX_MEMALIGN=1 -marm
	fpic = -fPIC
	LDFLAGS += -dynamiclib
	ifeq ($(IOSSDK),)
		IOSSDK := $(shell xcodebuild -version -sdk appletvos Path)
	endif
	COMMONFLAGS += -DIOS

else ifeq ($(platform), psp1)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = psp-gcc$(EXE_EXT)
	CXX = psp-g++$(EXE_EXT)
	AR = psp-ar$(EXE_EXT)
	WITH_DYNAREC = mips
	COMMONFLAGS += -DPSP -G0
	STATIC_LINKING = 1
else ifeq ($(platform), vita)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = arm-vita-eabi-gcc$(EXE_EXT)
	CXX = arm-vita-eabi-g++$(EXE_EXT)
	AR = arm-vita-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = arm
	COMMONFLAGS += -DVITA
	COMMONFLAGS += -mthumb -mcpu=cortex-a9 -mfloat-abi=hard -ftree-vectorize -ffast-math -fsingle-precision-constant -funroll-loops
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fno-optimize-sibling-calls
	STATIC_LINKING = 1
else ifeq ($(platform), ctr)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITARM)/bin/arm-none-eabi-g++$(EXE_EXT)
	AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
	WITH_DYNAREC = oldarm
	ENDIANNESS_DEFINES :=
	COMMONFLAGS += -DARM11 -D_3DS -Os -s -I$(CTRULIB)/include/
	COMMONFLAGS += -DHAVE_MKDIR
	COMMONFLAGS += -march=armv6k -mtune=mpcore -mfloat-abi=hard
	COMMONFLAGS += -mword-relocations
	COMMONFLAGS += -fomit-frame-pointer -fstrict-aliasing -ffast-math
	COMMONFLAGS += -DDISABLE_EXCEPTIONS
	COMMONFLAGS += -I$(DEVKITPRO)/libctru/include
	STATIC_LINKING = 1
else ifeq ($(platform), ngc)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	COMMONFLAGS += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float
	STATIC_LINKING = 1
else ifeq ($(platform), wii)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	COMMONFLAGS += -DGEKKO -DWII -mrvl -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DWORDS_BIGENDIAN=1
	STATIC_LINKING = 1
else ifeq ($(platform), wiiu)
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
	CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
	AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
	COMMONFLAGS += -DGEKKO -DWIIU -DHW_RVL -mcpu=750 -meabi -mhard-float -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1 -I./deps/include/
	COMMONFLAGS += -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int
	WITH_EMBEDDED_SDL = 1
	STATIC_LINKING = 1
	WITH_DYNAREC =
else ifneq (,$(filter $(platform), ps3 psl1ght))
    TARGET := $(TARGET_NAME)_libretro_$(platform).a
    CC = $(PS3DEV)/ppu/bin/ppu-$(COMMONLV)gcc$(EXE_EXT)
    CXX = $(PS3DEV)/ppu/bin/ppu-$(COMMONLV)g++$(EXE_EXT)
    AR = $(PS3DEV)/ppu/bin/ppu-$(COMMONLV)ar$(EXE_EXT)
    COMMONFLAGS += -D__PS3__ -D__POWERPC__ -D__ppc__ -DMSB_FIRST -DWORDS_BIGENDIAN=1
    STATIC_LINKING = 1
    ifeq ($(platform), psl1ght)
        COMMONFLAGS += -D__PSL1GHT__
    endif
else ifeq ($(platform), libnx)
	include $(DEVKITPRO)/libnx/switch_rules
	TARGET := $(TARGET_NAME)_libretro_$(platform).a
	CFLAGS += -g -O2 -fPIE -I$(LIBNX)/include/ -ffunction-sections -fdata-sections -ftls-model=local-exec -Wl,--allow-multiple-definition -specs=$(LIBNX)/switch.specs
	CFLAGS += $(INCLUDE) -D__SWITCH__ -DHAVE_LIBNX
	CXXFLAGS += $(ASFLAGS) $(CFLAGS) -std=gnu++11
	CFLAGS += -std=gnu11
	WITH_DYNAREC =
	STATIC_LINKING = 1
else ifeq ($(platform), emscripten)
	TARGET := $(TARGET_NAME)_libretro_$(platform).bc
	STATIC_LINKING = 1
	COMMONFLAGS += -DEMSCRIPTEN
	WITH_EMBEDDED_SDL = 1
else ifeq ($(platform), win)
	COMMONFLAGS += -mno-ms-bitfields
	TARGET := $(TARGET_NAME)_libretro.dll
	LDFLAGS += -shared -static-libgcc -static-libstdc++ -Wl,--version-script=libretro/link.T -lwinmm -Wl,-Bstatic `sdl-config --static-libs` -Wl,-Bdynamic
else ifeq ($(platform), genode)
	TARGET  := $(TARGET_NAME)_libretro.lib.so
	CC      := $(shell pkg-config genode-base --variable=cc)
	CXX     := $(shell pkg-config genode-base --variable=cxx)
	LD      := $(shell pkg-config genode-base --variable=ld)
	CXXFLAGS += $(shell pkg-config --cflags genode-stdcxx)
	CFLAGS  += $(shell pkg-config --cflags genode-libc)
	LDFLAGS += -shared --version-script=libretro/link.T
	LDFLAGS += $(shell pkg-config --libs genode-lib genode-libc genode-stdcxx)
	COMMONFLAGS += -D__GENODE__
	O_LEVEL = -O1
	LIBM =
	# Genode-specific stack allocation code for libco
	SOURCES_CXX += $(LIBRETRO_COMM_DIR)/libco/genode.cpp
endif

ifeq ($(DEBUG), 1)
	COMMONFLAGS += -O0 -g
else
	O_LEVEL ?= -O3
	COMMONFLAGS += $(O_LEVEL) -DNDEBUG -DGIT_VERSION=\"$(GIT_VERSION)\" -DSVN_VERSION=\"$(SVN_VERSION)\"
endif

OBJECTS  = $(sort $(SOURCES_CXX:.cpp=.o) $(SOURCES_C:.c=.o))
CXXFLAGS += -D__LIBRETRO__ $(fpic) $(INCFLAGS) $(COMMONFLAGS)
CFLAGS   += -D__LIBRETRO__ $(fpic) $(INCFLAGS) $(COMMONFLAGS)
LIBM     ?= -lm
LDFLAGS  += $(LIBM) $(fpic)

all: $(TARGET)
$(TARGET): $(OBJECTS)

ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else ifeq ($(platform),genode)
	$(LD) -o $@ $(OBJECTS) $(LDFLAGS)
else
	$(CXX) -o $@ $(OBJECTS) $(LDFLAGS)
endif

%.o: %.c
	$(CC) $(CFLAGS) -c $^ -o $@

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c $^ -o $@

clean:
	rm -f $(OBJECTS) $(TARGET)

.PHONY: clean install uninstall
